- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Get VPC variables
      include_vars: variables/setup_for_vpc.txt

    - name: Create VPC
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{state}}"
      register: vpcout

    #- debug:
        #var:vpcout

    - name: Create Pub sub1 for zone1
      ec2_vpc_subnet:
        vpc_id:  "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        cidr: "{{PubSub1Cidr}}"
        map_public: yes
        resource_tags:
          Name: test_pubsub1
      register: pubsub1_out

    - name: Create Pub sub2 for zone2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        cidr: "{{PubSub2Cidr}}"
        map_public: yes
        resource_tags:
          Name: test_pubsub2
      register: pubsub2_out

    - name: Create Pub sub3 for zone3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone3}}"
        state: "{{state}}"
        cidr: "{{PubSub3Cidr}}"
        map_public: yes
        resource_tags:
          Name: test_pubsub3
      register: pubsub3_out

    - name: Create Priv sub1 for zone1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        cidr: "{{PrivSub1Cidr}}"
        map_public: yes
        resource_tags:
          Name: test_privsub1
      register: privsub1_out

    - name: Create Priv sub2 for zone2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        cidr: "{{PrivSub2Cidr}}"
        map_public: yes
        resource_tags:
          Name: test_privsub2
      register: privsub2_out

    - name: Create Priv sub3 for zone3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        cidr: "{{PrivSub3Cidr}}"
        map_public: yes
        resource_tags:
          Name: test_privsub3
      register: privsub3_out

    - name: Create Internet gateway
      ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: test_gateway
      register: igw_out

    - name: Create Route tables
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: test_public_route_tbl
        subnets:
        - "{{pubsub1_out.subnet.id}}"
        - "{{pubsub2_out.subnet.id}}"
        - "{{pubsub3_out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw_out.gateway_id}}"
      register: pub_route_out

    - name: Create new NAT gateway and allocate and allocate an elasticIP if NAT doesne't already exsits
      ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{pubsub1_out.subnet.id}}"
        wait: yes
        region: "{{region}}"
        if_exist_do_not_create: true
      register: NATGW_out

    - name: Create private subnet Route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: test_priv_route_tbl
        subnets:
          - "{{privsub1_out.subnet.id}}"
          - "{{privsub2_out.subnet.id}}"
          - "{{privsub3_out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{NATGW_out.nat_gateway_id}}"
      register: priv_route_out



